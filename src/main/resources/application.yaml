# =============================================
# springboot 2 configurations
# ---------------------------------------------
spring:
  application:
    name: ${OPENSHIFT_APP_NAME:openbanking-proxy-policy}
  datasource:
    initialization-mode: never

api:
  title: ${OPENSHIFT_APP_NAME:openbanking-proxy-policy}
  description: Banco do Nordeste - openbanking-proxy-policy
  version: 1
  hostname: ${OPENSHIFT_HOST_NAME:openbanking-proxy-policy.apps.openshift.com}

logging:
  config: classpath:logback.xml
  level:
    root: INFO

# options from org.apache.camel.spring.boot.CamelConfigurationProperties can be configured here
camel:
  springboot:
    name: ${OPENSHIFT_APP_NAME:openbanking-proxy-policy}
    main-run-controller: true
  component:
    servlet:
      mapping:
        contextPath: /api/v${api.version}/*
    jmxEnabled: true

# lets listen on all ports to ensure we can be invoked from the pod ip address
server:
  address: 0.0.0.0
  port: 8085

# lets use a different management port in case you need to listen to HTTP requests on 8080
management:
  endpoints:
    web:
      exposure:
        include:
          - info
          - health
          - metrics
          - jvm
          - prometheus
  metrics:
    export:
      prometheus:
        enabled: true

# =============================================
# opentracing configurations
# see: https://github.com/opentracing-contrib/java-spring-jaeger/blob/master/README.md
# ---------------------------------------------
opentracing:
  jaeger:
    enabled: true
    service-name: ${OPENSHIFT_APP_NAME:openbanking-ip-rate-limit}
    enable-b3-propagation: true
    log-spans: true
    const-sampler:
      decision: true
    udp-sender:
      host: ${OPENSHIFT_JAEGER_HOST:localhost}
      port: 6831
    http-sender:
      url: ${OPENSHIFT_JAEGER_TRACE_API_URL:http://localhost:14268/api/traces}
    expand-exception-logs: true
    remote-reporter:
      max-queue-size: 10000
      flush-interval: 1000
    tags:
      - openbanking
      - proxy
      - ip-rate-limit
custom:
  policy: 
    ipratelimit:
      maxhitcount: ${MAX_IP_HIT_COUNT:10}
      # Milliseconds time windows for requests
      timeWindow: ${TIME_WINDOW:30000}
  dev:
    env: false
  endpoint:
  rhdg:
    cache:
      name: ${CACHE_NAME:cache-ip-rate-limit}
    health:
      check:
        host: ${JDG_APP_NAME:datagrid-fuse-policy}.${JDG_SERVICE_NAMESPACE:rh-datagrid-73}.svc:9990

# Native Keys of API. With this keys is possible to send the properties file as parameter in ConfigurationBuilder. See (configurationBuilder.withProperties(file properties);)
infinispan:
  client:
    hotrod:
      auth_server_name:
      auth_username: 
      auth_password: 
      use_auth: false
      connect_timeout: 5000
      socket_timeout: 5000
      max_retries: 3
      server_list: ${JDG_APP_NAME:datagrid-fuse-policy}.${JDG_SERVICE_NAMESPACE:rh-datagrid-73}.svc:11222
  hotrod:
    trustStoreFileName: ${SERVICE_CA:/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt}
    host: ${JDG_APP_NAME:datagrid-fuse-policy}.${JDG_SERVICE_NAMESPACE:rh-datagrid-73}.svc
    port: 11222
    username: 
    password: 